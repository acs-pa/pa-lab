#!/usr/bin/env python
from enum import Flag
import sys


def check(n, edges, cost_ref, edges_out):
    new_edges_out = []
    for x, y in edges_out:
        if x > y:
            x, y = y, x
        new_edges_out.append((x, y))
    edges_out = list(set(new_edges_out))
    if n - 1 != len(edges_out):
        return False, 'MST nu are fix n-1 muchii unice!'

    adj = {}
    for x, y, w in edges:
        if (x, y) not in adj:
            adj[(x, y)] = w
        else:
            adj[(x, y)] = min(adj[(x, y)], w)

        if (y, x) not in adj:
            adj[(y, x)] = w
        else:
            adj[(y, x)] = min(adj[(y, x)], w)

    cost = 0
    for x, y in edges_out:
        if not (x, y) in adj:
            return False, 'Muchia invalida ({}, {}) in MST.'.format(x, y)
        cost += adj[ (x, y) ]

    if cost_ref != cost:
        return False, 'Muchiile date formeaza un arbore cu cost gresit: {} vs {}'.format(cost_ref, cost)

    def dfs(node, adj_out, visited):
        visited[node] = True

        for neigh in adj_out[node]:
            if not visited[neigh]:
                dfs(neigh, adj_out, visited)

    visited = [False for _ in range(n + 1)]
    adj_out = [[] for _ in range(n + 1)]
    for x, y in edges_out:
        adj_out[x].append(y)
        adj_out[y].append(x)

    dfs(1, adj_out, visited)
    if n != len(list(filter(lambda flag: flag, visited))):
        return False, 'Muchiile date nu formeaza un arbore!'

    return True, ''

def main():
    [_, file_in, file_ref, file_out] = sys.argv

    with open(file_in) as f:
        [n, m] = [int(x) for x in next(f).split()]
        edges = [(int(line.split()[0]), int(line.split()[1]), int(line.split()[2])) for line in f]
        assert(m == len(edges))

    with open(file_ref) as f:
        [cost_ref] = [int(x) for x in next(f).split()]

    with open(file_out) as f:
        [cost_out] = [int(x) for x in next(f).split()]
        edges_out = [(int(line.split()[0]), int(line.split()[1])) for line in f]

    if cost_ref != cost_out:
        sys.stdout.write('\nCerinta 1.1 gresita: cost {} vs {}\t'.format(cost_ref, cost_out))
        sys.exit(1)

    sys.stdout.write('\nCerinta 1.1 rezolvata!\t')

    ok, err = check(n, edges, cost_ref, edges_out)
    if not ok:
        sys.stdout.write('\nCerinta 1.2 gresita: {}\t'.format(err))
        sys.exit(1)


    sys.stdout.write('\nCerinta 1.2 rezolvata!\t')
    sys.exit(0)

if __name__ == "__main__":
    main()
